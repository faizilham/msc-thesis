
/*
== Basic intuitions and desirable properties

We first describe the basic intuitions about the problem and the properties we desire from the analysis. In most cases, the return values of function calls should be used in an expression or assigned to a variable. We shall call these functions having a must-use obligation. This is the default usage obligation because ignoring the return value is usually a mistake. A major exception to the must-use obligation is if the returned value is a unit-type value, as it is cumbersome if the compiler requires users to use unit values.

Another exception is when ignoring the return value of certain functions is usually safe. For example, the function `MutableSet.add` in the standard library returns a Boolean value indicating whether the element is added to the set if it does not exist previously. In most cases, this Boolean value is safe to ignore. If the compiler keeps warning about this, it will only frustrate users, resulting in users disregarding future warnings and missing other more important unused value warnings. Therefore, there has to be a way to indicate that the return values of certain functions are safe to discard. We shall call these functions as discardable or having a may-use obligation.


One potential way to mark such discardable functions is by using Kotlin's annotation #cite(<KotlinSpec2020>) feature. \Cref{lst:1_basic} shows an example of how the analysis would potentially look like. In this example, the return value of `ignored` can be safely discarded since it has the `Discardable` annotation.

/*
\begin{listing}[H]
    \caption{Basic unused value analysis}
    \label{lst:1_basic}
    \begin{kotlin}
        fun normal() : Int = 1
        \@Discardable fun ignored() : Int = 1

        val x = normal() // no warning
        print(x)         // no warning because it returns Unit type
        ignored()        // no warning because of @Discardable annotation
        normal()         // triggers warning
    \end{kotlin}
\end{listing}
*/


=== Propagation through higher-order functions

Many Kotlin code bases extensively use lambda functions since it is the idiomatic style in Kotlin. This is especially true because of the scope functions provided in Kotlin's standard library, in which a lambda function is executed within the context or scope of an object. Some scope functions, such as `run` and `with`, also return the resulting value of the lambda function. It would be useful if the analysis could propagate the usage obligation of the resulting values to the scope functions or other higher-order functions.

\Cref{lst:1_lambda} shows the example of the analysis with higher-order functions. This example is similar to the previous one shown in \Cref{lst:1_basic}, but each function is called indirectly using `run` scope function. The analysis gives the same warning as the previous one due to usage obligation propagation.

// \begin{listing}[H]
//     \caption{Unused value analysis with higher-order function}
//     \label{lst:1_lambda}
//     \begin{kotlin}
//         inline fun <R> run(block: () -> R): R  // scope function from the standard library

//         fun normal() : Int = 1
//         \@Discardable fun ignored() : Int = 1

//         val x = run { normal() } // no warning
//         run { print(x) }         // no warning because of unit type
//         run { ignored() }        // no warning because @Discardable is propagated
//         run { normal() }         // triggers warning
//     \end{kotlin}
// \end{listing}


=== Notion of usage and utilizable types

For most types, using a value means assigning it to a variable, passing it to a function, or calling a method upon it. However, for certain types, it is more useful to define when precisely a value is used. For example, a `Deferred` value in Kotlin represents an asynchronous non-blocking computation, with `.await()` method to wait for it to finish and `.cancel()` method to cancel it.  While we can certainly handle it with the usual notion of usage, it is more useful to argue that a `Deferred` should be considered unused until we call `.await()` or `.cancel()` at least once. This way the analysis may guarantee to a certain degree that any asynchronous computation will eventually be awaited or canceled. Other types in Kotlin that may benefit from a more precise usage definition are `Sequence` and `Flow`.
/*
\begin{listing}[H]
    \caption{Unused value analysis with utilizable type Deferred}
    \label{lst:1_utilize}
    \begin{kotlin}
        suspend fun sums(): Int = coroutineScope {
            val one = async { 1 }    // no warning
            val two = async { 2 }    // no warning
            val three = async { 3 }  // warning, incomplete utilization
            var sum = one.await()

            if (sum > 1) {
                sum += two.await() + three.await()
            } else {
                two.cancel()
                // we forget to cancel or await three here
            }

            sum
        }

        fun asyncFour(scope: CoroutineScope) : Deferred<Int> {
            val four = scope.async { 4 } // no warning because it escapes the function
            return four
        }
    \end{kotlin}
\end{listing}
*/

We shall call these types of values the utilizable types, and the associated set of functions that use them the utilizer functions. A utilizable value is considered to be used if and only if it is passed to any of the utilizer functions at least once. Otherwise, it remains unutilized. The analysis should then warn about any non-escaping unutilized values. \Cref{lst:1_utilize} illustrates an example with Deferred type. In function `sums`, the analysis warns about incomplete utilization of variable `three` because there is a path in which it is not utilized and not escaping, that is through the else branch. In contrast, while we never directly utilize the value of variable `four` in function `asyncFour`, the analysis should not produce any warning because the value escapes the function.


== Research challenges

A few challenges arise due to the design and desired properties of the analysis. We currently have identified three main challenges that should be addressed in our research: propagation rules, alias tracking, and adoption into Kotlin.

=== Usage obligation propagation rules

While the basic intuition for the usage obligation propagation is quite straightforward in the case of simple higher-order functions like `run`, it is still unclear how exactly the propagation would work with other control flow structures.

Consider the example illustrated in \cref{lst:1_propagation_rule}.
Based only on our simplistic intuition, it is unclear which of the four `run` calls may trigger the warning. For calls 1 and 2, it can be argued that the analysis should produce a warning for the first call but not the second one. For calls 3 and 4 that use functions `singleIgnored` and `doubleIgnored`, however, several design choices can be made. The first choice is to always propagate may-use obligations even if the functions are not annotated with `Discardable`. The second choice is to not automatically propagate it in named functions, but the analysis will produce warnings to remind users to add `Discardable` annotations if all execution paths of the functions produce discardable values. Another choice is to only propagate in specially annotated functions, that is to update the `run` function in the standard library with a new special annotation. Design choices like these have advantages and disadvantages that will be explored in our research.

/*
\begin{listing}[H]
    \caption{A more complex propagation case}
    \label{lst:1_propagation_rule}
    \begin{kotlin}
        fun normal() : Int = 1
        \@Discardable fun ignored() : Int = 1
        \@Discardable fun ignored2() : Int = 2

        fun singeIgnored() : Int = ignored()
        fun doubleIgnored(b : Boolean): Int = if (b) ignored() else ignored2()

        fun testPropagate(b: Boolean) {
            run { if (b) normal() else ignored() }    // 1
            run { if (b) ignored() else ignored2() }  // 2
            run { singeIgnored() }                    // 3
            run { doubleIgnored(b) }                  // 4
        }
    \end{kotlin}
\end{listing}
*/

=== Alias tracking

Alias tracking is the second challenge that we need to address in our research, especially in the case of utilizable types. Alias tracking is an analysis technique for determining which variables or references refer to the same object. Consider a basic aliasing problem shown in \Cref{lst:1_aliasing_basic}. In this example, variables `two` and `three` refer to the same Deferred object. Because all Deferred objects in function `sums` are awaited, the analysis should produce no warning.

/*
\begin{listing}[H]
    \caption{A basic aliasing problem}
    \label{lst:1_aliasing_basic}
    \begin{kotlin}
        suspend fun sums(): Int = coroutineScope {
            val one = async { id(1) }
            val two = async { id(2) }

            val three = two  // three is alias to two

            one.await() + three.await() // ideally no warning at all
        }
    \end{kotlin}
\end{listing}
*/

A more complex aliasing problem example is illustrated in \Cref{lst:1_aliasing_complex}. In this example, the aliasing happens when Deferred objects are passed as arguments to other functions. In an ideal, exact analysis no warning should be produced, because the variables `one` and `two` are eventually awaited. However, this might be unrealistic or too complex to achieve without a more sophisticated system such as borrowing. Therefore, some levels of under or overapproximations are expected.

/*
\begin{listing}[H]
    \caption{A complex aliasing problem}
    \label{lst:1_aliasing_complex}
    \begin{kotlin}
        fun <T> addFinishLog(deferred: Deferred<T>) {
            deferred.invokeOnCompletion { print("finished!") }
        }

        suspend fun <T> awaitAndLog(deferred: Deferred<T>) : T {
            val result = deferred.await()
            println("finished!")
            return result
        }

        suspend fun sums2() : Int = coroutineScope {
            val one = async { 1 }
            val two = async { 2 }

            addFinishLog(one)
            one.await() + awaitAndLog(two) // ideally no warning at all
        }
    \end{kotlin}
\end{listing}
*/

Other cases of aliasing problems we might encounter in our research are when the utilizable values are assigned to an object property or a collection data structure like `List`. Since aliasing analysis is an extensive topic, we shall limit alias handling in this research to only a small set of cases and focus on ensuring that the analysis is flexible enough to be extended with a separate alias tracking analysis.

=== Adoption into Kotlin

The last challenge that should be considered in our research is adopting and implementing the analysis into the Kotlin compiler. The Kotlin compiler is a complex program with millions of developers as its users. While unused value analysis can be quite an important tool for detecting possible bugs, it should also be conservative in producing warnings. Too many false positive warnings can hinder the users' productivity and trust in the tools. While we still attempt to reduce false negatives, in our particular case it is less important than false positives. Our research should also look into patterns that the users employ in their codes so that we may understand which cases are more important to handle in the analysis.

The analysis implementation should also use the existing Kotlin compiler framework and infrastructures and does not require tremendous changes to the Kotlin compiler and the language specification. This means that a less accurate implementation with small changes should be prioritized instead of an accurate implementation with drastic changes.


== Research questions

Based on the challenges we have identified, we formulate three research questions.

    + How does the unused return value analysis be defined, especially concerning usage obligation propagation rules and alias tracking?
    + How does the unused return value analysis be implemented in the existing Kotlin compiler infrastructure?
    + How accurate is the unused return value analysis in terms of false positives and negatives when applied to existing Kotlin code bases?


*
*/

----


/*

== Parametric inference

$
  (A -> B andef {1 |-> epsilon} union phiEf, A) -> B andef {2 |-> epsilon} union phiEf \

  E = "Set of effect variables" = {epsilon_1, ..., epsilon_n}\

  Omega = { omega_i | p_i in "Params" } union{ omega_epsilon | epsilon in E } \

  U = powerset({NU, UT} union Omega) \


  "replace"(Gamma, PiEf) = {i |-> ef | i |-> epsilon in PiEf, Gamma(epsilon) = {ef}} union {i |-> omega_epsilon | i |-> epsilon in PiEf, Gamma(epsilon) = emptyset}\


  "ApplyEff"(u, ef) = cases(
    {UT} "," &"if" ef = EfU,
    {NU} "," &"if" ef = EfI,
    {omega_epsilon} "," &"if" ef = epsilon,
    u "," &"if" ef = EfN,
  )\

  "GetEff"(utv, u) = cases(
    EfN & "if" u = utv,
    EfU &"if" u = {UT},
    EfI &"if" u = {NU},
    epsilon &"if" u = {omega_epsilon},
    EfX &"otherwise"
  )\

  PiEf = {i -> "GetEff"(evalexit(mono("exit"))(p_i)) | p_i in "Params" }\
  PhiEf = {v -> "GetEff"(evalexit(mono("exit"))(v)) | v in "FV" }\

$

```
call(f : ... & 1->ef, g: ...& 1->eg, x) = f(x); g(x) --- x = {ef, eg}
```
*/

/*

== Usage analysis

here? drop?

- Discardable-ness
- Same-use
- Inference of discardable and same-use
*/


---------


== Notes (temporary, will be moved or deleted)

Algorithms

```
Analyze(F, UpperAlias):
  Warnings := EmptySet
  AliasPerNode := AnalyzeFunctionAlias(F) + UpperAlias
  UtilParams := EmptyMap
  UtilFVs := EmptyMap
  for each local function G in F:
    (W, P, F) := Analyze(G, AliasPerNode)
    Warnings := Warnings + W
    UtilParams[G] := P
    UtilFVs[G] := F

  UtilPerNode := AnalyzeUtilization(AliasPerNode, UtilParams, UtilFVs)
  S := UtilPerNode[start]
  return (Warnings + GenWarning(S), GenUtilParam(S), GenUtilFV(S))
```



A function type can be annotated with utilization effects after the return type,
such as

$f ::(t_1,...,t_n) -> t_r andef (epsilon_1, ..., epsilon_n)$,

Given a function $f(a_1, ..., a_n) :: (t_1,...,t_n) -> r andef (epsilon_1, ..., epsilon_n)$, the utilization of argument $a_i$ after the function call is equal to $"EvalEff"(epsilon_i, s[a_i])$

$
  "EvalEff"(e, u) = cases(
    { "true" } & "if" e = U,
    u & "if" e = N,
    { "false" } & "if" e = I
  )
$

Annotation examples:

$
  "await" :: ("Deferred"angles(T)) ->^U "T" \
  "await" :: ("Deferred"angles(T)) -> "T" andef U\
$

$
  "let" :: (A,  (A) -> B ) -> B \
  "let" :: A ->^epsilon (A ->^epsilon B ) -> B \
  "let" :: (A,  (A) -> B andef epsilon ) -> B andef (epsilon, N) \
  "let"(x, f) = f(x)\
$
$

  "applyTwo" :: (A, A, (A) -> B andef epsilon) -> (B, B) andef (epsilon, epsilon, N) \
  "applyTwo" :: A ->^epsilon A ->^epsilon (A ->^epsilon B) -> (B, B)\
  "applyTwo"(x, y, f) = (f(x), f(y))

$

A + operator might be allowed

$
  "toTuple" :: (A, (A) -> B, (A) -> B) -> (B, C) \
  "toTuple" :: A -->^(epsilon_1 + epsilon_2) (A ->^(epsilon_1) B) -> (A ->^(epsilon_2) C) -> (B, C) \
  "toTuple" :: (A, (A) -> B andef epsilon_1, (A) -> C andef epsilon_2) -> (B, C) andef (epsilon_1 + epsilon_2, N, N) \
  "toTuple" :: (\
  wide quad x: A,\
  wide quad f: (a_f: A) -> B andef epsilon_f,\
  wide quad g: (a_g: A) -> C andef epsilon_g\
  wide ) -> (B, C) andef {x arrow.bar epsilon_f (a_f) + epsilon_g (a_g)} \
$
$
  "toTuple"(x, f, g) = (f(x), g(x))
$

// Parametric utilization at return position is currently not allowed, but possibly consistent.

// $
//   "applyId" :: (ann(omega) D, (ann(omega) D) -> ()) -> ann(omega)D\
//   "applyId"(x, g) = g(x); x\

//   "id" :: (ann(omega)D) -> ann(omega)D\
//   "id"(x) = x \

//   "choose" :: ("Bool", ann(omega_1) D, ann(omega_2) D) -> ann(omega_1 + omega_2) D\
//   "choose"(c,x,y) = x "if" c, "otherwise" y
// $

Term & Prerequisite lattice:

$
  "term" &::= upar(f, i) | "ret" \
  "prereq" &::= "true" | "false" | "term" (or "term")^* \
  & t or t = t\
  & t_1 or t_2 = t_2 or t_1\
  & (t_1 or t_2) or t_3 = t_1 or (t_2 or t_3) \
  & t or "true" = "true"\
  & t or "false" = t \
  UU &= (powerset("prereq"), subset.eq) \
  &attach(bot, br: UU) = emptyset subset.sq.eq { "true" }, {upar(a, 1)}, {
    ucol(z)
  } subset.sq.eq ... subset.sq.eq attach(top, br: UU) = "prereq" \
  SS &= "MapLat"(VV, UU) \
$


Pairwise or operator:
$
   A orpair B &= { a or b | a in A, b in B }
$

$
  // "UtilParam"(F, i) :: "Func" -> NN -> cal(U)\
  // "UtilFV"(F) :: "Func" -> "Var" -> cal("U")\
  "FuncEffects" :: "Func" -> NN + "Var" -> E
$



Transfer function:

$
  &evalexit(mono("exit")) = { x -> { "false" } | x in R without "CS" } union { f -> emptyset | f in "CS" } \

  &evalexit(p) = join.big_(q in "succ"(p)) evalentry(q) \

  &evalentry(mono("p: x :=" lbl(e))) = s[lbl(e) -> s(lbl(e)) orpair s(x), x -> { "false" }], "where" s = evalexit(p) \

  &evalentry(mono("p:" lbl(e) "= f") | mono(f) in C) = s[f ->s(lbl(e))], "where" s = evalexit(p)\

  &evalentry(mono("p:" lbl(e) "= x")) = s[x -> s(x) orpair s(lbl(e))], "where" s = evalexit(p)\
$

$
  &evalentry(mono("p: ")lbl(e) = lbl(f)(lbl(a_1), ..., lbl(a_n) )) = (
    "MarkFV" compose "MarkArgs" compose "UpdateCall"
  )(evalexit(p)) \
    & quad "where:" \

    & quad "UpdateCall"(s) = s[lbl(f) -> s(lbl(e))]\
    & quad "MarkArgs"(s) = s[lbl(a_i) -> "mark"(s, lbl(a_i), ef) | (i -> ef) in "FuncEffects"(f')]\

    & quad "MarkFV"(s) = s[x -> "mark"(s, x, ef) | (x -> ef) in "FuncEffects"(f')] \

    & quad "mark"(s, alpha, ef) =  cases(
      "EvalEff"("Instantiate"(epsilon, k), s(alpha)) & "if" ef = epsilon (k),
      "EvalEff"(ef, s(alpha)) & "otherwise",
    ) \

    // & quad "mark"(s, alpha, u) =  cases(

    //   { "true" } &"if" u = 1,
    //   s(alpha) orpair "ConcreteUtil"(omega_k) & "if" u = omega_k,
    //   s(alpha) orpair {upar(f', i)} & f' in "Params",
    //   s(alpha) & "otherwise",
    //   // s(alpha)  &"otherwise"
    // ) \
    //
    & quad "EvalEff"(e, u) = cases(
      { "true" } & "if" e = U,
      u & "if" e = N,
      { "false" } & "if" e = I
    )\

    & quad "Instantiate"(epsilon, k) = "Resolve" epsilon "in" a'_1...a'_n, "apply" epsilon(k)\

    // & quad "ConcreteEff" = "Instance"(p, "type"(f'), (lbl(a_1), ..., lbl(a_n)))\
    & quad f' = "resolve"(p, lbl(f))\
    & quad "resolve"(p, lbl(e)) = evalexit(p)_("FA")(lbl(e))\

$

// Instantiation of parameteric utilization effect.

// $
//   "Instance"(p, t andef epsilon, (a_1, ..., a_n))
//  = union.big_((t_alpha, alpha) in "FA") "InstFuncArg"(t_alpha, "resolve"(p, alpha), "EP")\
//   quad "where" "FA" = { (t (i), a_i) | i in [1..n] and t (i) "is a function type" }\
//   quad "         EP" = {epsilon_k | epsilon_k "appearing in" epsilon}\

//   "InstFuncArg"(t andef epsilon, phi, e) = {} union union.big_(alpha_i in "args"(phi)) "InstArg"(phi, t (i), alpha_i)
//   \

//   "InstArg"(phi, t, alpha_i) = cases(
//     "InstFuncArg"(t, alpha_i)    & "if" t "is a function type",
//     { epsilon_k -> "ArgUtil"(phi,i) } & "if" t "has a parametric eff." epsilon_k,
//     emptyset                      & "otherwise"
//   ) \

//   "ArgUtil"(phi, i) = cases(
//     { "true" }        & "if" "UtilParam"(phi, i) = 1,
//     { upar(phi, i) }  & "if" phi in "Params",
//     { "false" }       & "otherwise"
//   )\
// $


// Instantiation of parameteric utilization. $"Instance"(t,a_1..a_n)$ returns map of ${omega -> UU}$

// $
//   "Instance"(t, (a_1, ..., a_n))
//  = union.big_((t_alpha, alpha) in "FA") "InstFuncArg"(t_alpha, alpha)\
//   quad "where" "FA" = { (t (i), a_i) | i in [1..n] and t (i) "is a function type" }\

//   "InstFuncArg"(t, phi) = union.big_(alpha_i in "args"(phi)) "InstArg"(phi, t (i), alpha_i)
//   \

//   "InstArg"(phi, t, alpha_i) = cases(
//     "InstFuncArg"(t, alpha_i)    & "if" t "is a function type",
//     { omega_k -> "ArgUtil"(phi,i) } & "if" t "has a parametric util." omega_k,
//     emptyset                      & "otherwise"
//   ) \

//   "ArgUtil"(phi, i) = cases(
//     { "true" }        & "if" "UtilParam"(phi, i) = 1,
//     { upar(phi, i) }  & "if" phi in "Params",
//     { "false" }       & "otherwise"
//   )\
// $

$
  &evalentry(mono("p: return" lbl(e))) = evalexit(p)[lbl(e) -> lbl(e) orpair { ret }]\

  &evalentry(p) = evalexit(p)
$

Analysis result

$
  &"Warnings" = {f | f in "CS" and evalentry(mono("start"))(f) leqsq.not { "true", ret } } \

  // & Upsilon(g, i) = cases(
  //   "true" &"if" g in "Params" and "arg"(g,i) "has util. ann." ann(1),
  //   omega_k &"if" g in "Params" and  "arg"(g,i) "has util. ann." ann(omega_k),
  //   "false" &"otherwise",
  // ) \

  // &"eval"(u) = and.big_(t in u') t "where" u' = u|_(upar(g,i) = Upsilon(g,i)) forall i, g in "Params" \

  // &"Replace"(s, f) = { x -> "eval"(u) | x -> u in s}
  \

$
If F is a local function (without inference):
$


  "FuncEffects(F)" =
        & { "index"(v) -> U | v in "Params" and evalentry(mono("start"))(v) leqsq {"true"} }\
        & union { v -> U | v in "FV" and evalentry(mono("start"))(v) leqsq {"true"} }
  \
$

with list

$
  // &evalentry(mono("p: ")lbl(e) = lbl(f)(lbl(a_1), ..., lbl(a_n) )) = (
  //   "MarkFV" compose "MarkArgs" compose "UpdateCall"
  // )(evalexit(p)) \
  //   & quad "where:" \

  //   & quad "UpdateCall"(s) = s[lbl(f) -> s(lbl(e))]\
  //   & quad "MarkArgs"(s) = s[lbl(a_i) -> "mark"(s, lbl(a_i), u) | (i -> u) in "UtilParam"(f')]\

  //   & quad "MarkFV"(s) = s[x -> "mark"(s, x, u) | (x -> u) in "UtilFV"(f')] \

  //   & quad "mark"(s, alpha, u) =  cases(

  //     { "true" } &"if" u = 1,
  //     { "false" } &"if" u = -1,
  //     s(alpha) orpair "ConcreteUtil"(omega_k) & "if" u = omega_k,
  //     s(alpha) orpair {upar(f', i)} & f' in "Params",
  //     s(alpha) & "otherwise",
  //     // s(alpha)  &"otherwise"
  //   ) \

  &evalentry("p:" lbl(e) ="utilize"(lbl(c))) = s[lbl(c) -> "mark"(s, lbl(c), U) = {"true"}]\
  &evalentry("p:" lbl(e) ="map"(lbl(c), lbl(f))) = s[lbl(c) -> "mark"(s, lbl(c), "FuncEffects"(f', 1))]\
  &evalentry("p:" lbl(e) ="add"(lbl(c), lbl(x))) = s[lbl(x) -> s(c') | lbl(c) "is expression of var" c']\
  &evalentry("p:" lbl(e) ="filter"(lbl(c), lbl(f))) = s[lbl(c) -> {"false"_lbl(e)}]\
$

// $
//   "utilize" :: (ann(1) C angles(U)) -> ()\
//   "map" :: (ann(omega) C angles(U), (ann(omega) U) -> T ) -> C angles(T)\
//   "add" :: (ann(omega) C angles(U), ann(omega) U) -> ()\
//   // "add" :: (C angles(U), ann(1) U) -> ()\
//   "remove" :: (ann(-1) C angles(U), U) -> ()\
//   "filter" :: (ann(-1) C angles(U), (U)-> "Bool") -> C angles(U)\
// $



Example:
#listing("Parametric utilization instantiation")[
```kotlin
fun T, R> (@u1 T).let(f: (@u1 T) -> R): R = f(this)

fun test(g: (Deferred) -> ()) {
  val x = Deferred(...)

  if (...) {
    x.let(g)
  } else {
    val l1 = { it.await() }
    x.let(l1)
  }
}
```]

#listing("With analysis")[
```kotlin
fun T, R> (@u1 T).let(f: (@u1 T) -> R): R = f(this)
  // UtilPar(let) = {0 (this) -> u1}

fun test(g: (Deferred) -> ()) { // UtilPar(g) = {0 -> 0}

  val x = Deferred(...) // callsite d1 -> s(x) = {par(g,0), true}

  // x -> true_branch(x) join false_branch(x) = {par(g,0), true}
  if (...) {
    x.let(g)    // x -> {false} V↔ Concrete(u1) = {par(g, 0)}
                // Concrete(u1) = {par(g,0)},
                //    since UtilPar(g) != 1 & g in Params
                // Instantiate((@u1 T) -> R, g: (T) -> R)

  } else {
    val l1 = { it.await() } // UtilPar(l1) = {0 (it) -> 1}

    x.let(l1)   // x -> {false} V↔ Concrete(u1) = {true}
                // Concrete(u1) = {true}, since UtilPar(l1, 0) = 1
                // Instantiate((@u1 T) -> R, l1: (@1 T) -> R)
  }

  // x -> {false}
}
```]<withAnalysis>




/*
== With zero

$
   A union.dot B &= union.big_((a, b) in  A times B) {a union b} \

   A accent(union.dot, arrow.l) t &= {a union {t} | a in A} = A union.dot {{t}}\
$

$
  "term" ::= 0 | 1 | omega_k | upar(f,i)\
  "prereq" = powerset("term")\

  cal(U) = powerset("prereq")

$

$
  &Z = {{0}} \
  &evalexit(mono("exit")) = { x -> Z | x in R without "CS" } union { f -> emptyset | f in "CS" } \

  &evalexit(p) = join.big_(q in "succ"(p)) evalentry(q) \

  &evalentry(mono("p: x :=" lbl(e))) = s[lbl(e) -> s(lbl(e)) union.dot s(x), x -> Z ], "where" s = evalexit(p) \

  &evalentry(mono("p:" lbl(e) "= f") | mono(f) in C) = s[f ->s(lbl(e))], "where" s = evalexit(p)\

  &evalentry(mono("p:" lbl(e) "= x")) = s[x -> s(x) union.dot s(lbl(e))], "where" s = evalexit(p)\
$

$
  &evalentry(mono("p: ")lbl(e) = lbl(f)(lbl(a_1), ..., lbl(a_n) )) = (
    "MarkFV" compose "MarkArgs" compose "UpdateCall"
  )(evalexit(p)) \
    & quad "where:" \

    & quad "UpdateCall"(s) = s[lbl(f) -> s(lbl(e))]\
    & quad "MarkArgs"(s) = s[lbl(a_i) -> "mark"(s, lbl(a_i), "UtilParam"(f', i)) | i in [1..n] and lbl(a_i) :: "UType"]\

    & quad "MarkFV"(s) = s[x -> "mark"(s, x, u) | (x, u) in "UtilFV"(f')] \

    & quad "mark"(s, alpha, u) =  cases(

      { "true" } &"if" u = "true",
      s(alpha) orpair "ConcreteUtil"(omega_k) & "if" u = omega_k,
      s(alpha) orpair upar(f', i) & f' in "Params",
      s(alpha) & "otherwise",
      // s(alpha)  &"otherwise"
    ) \

    & quad "ConcreteUtil" = "Unify"(tau(f'), (a'_1, ..., a'_n))\
    & quad f' = "resolve"(lbl(f))\
    & quad a'_i = "resolve"(lbl(a_i)) "for" i in [1..n] \
    & quad "resolve"(lbl(e)) = evalexit(p)_(Phi)(lbl(e)) \

$
*/
