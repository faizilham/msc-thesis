= Abstract

Unused values found in source codes are sometimes a source of potential bug. This is especially true for some types of values that must be eventually used by a certain set of functions. For example, an asynchronous call must be eventually awaited or canceled, otherwise it is likely a mistake. This pattern of usage is called a utilization, and the types that must be utilized being the utilizable types. We present a formalization of a data-flow analysis for statically analyzing value utilization in Kotlin programs, and implement a prototype of the analysis as a Kotlin compiler plugin. We extend the function signature type in Kotlin to include annotations for utilization statuses and effects. Utilization status annotation at the parameter position denotes the required utilization status of the passed argument, while the annotation at the return type position indicates the resulting utilization status of the returned value. The utilization effect annotation signifies how the utilization statuses of parameters or free variables should change after calling the function. Our analysis method warns users about utilizable values that are not fully utilized, in addition to checking and inferring the functions' utilization annotations.
