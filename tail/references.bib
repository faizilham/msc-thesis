@book{KotlinSpec2020,
  title        = {Kotlin language specification: Kotlin/Core},
  author       = {Marat Akhin and Mikhail Belyaev and others},
  publisher    = {JetBrains / JetBrains Research},
  year         = {2020},
  url          = {https://kotlinlang.org/spec/pdf/kotlin-spec.pdf},
  urldate      = {2024-07-15}
}

@book{NielsonPPA,
author = {Flemming Nielson and Hanne R. Nielson and Chris Hankin},
title = {Principles of Program Analysis},
year = {2010},
isbn = {3642084745},
publisher = {Springer Publishing Company, Incorporated},
}

@book{MollersSPA,
    title =        {Static Program Analysis},
    author =       {Anders M\o{}ller and Michael I. Schwartzbach},
    year =         {2018},
    publisher =    {Department of Computer Science, Aarhus University},
}

@incollection{SwiftWarn,
    author = {Erica Sadun and Adrian Kashivskyy},
    title = {Defaulting non-Void functions so they warn on unused results},
    booktitle = {Swift Evolution},
    publisher = {Swift},
    year = {2016},
    url = {https://github.com/swiftlang/swift-evolution/blob/main/proposals/0047-nonvoid-warn.md},
    urldate = {2024-07-15}
}

@misc{CppNoDiscard,
    author = {ISO/IEC},
    title = {ISO International Standard ISO/IEC 14882:2017 - Programming Language C++},
    year = {2017},
    note = {[Working Draft]}
}

@inbook{walkerST,
    title={Substructural Type Systems},
    author={Walker, David},
    booktitle={Advanced Topics in Types and Programming Languages}, publisher={The MIT Press},
    year={2005},
    pages={3–43}
}

@inproceedings{LinearUniqMarshall,
  title={Linearity and Uniqueness: An Entente Cordiale},
  author={Daniel Marshall and Michael Vollmer and Dominic A. Orchard},
  booktitle={European Symposium on Programming},
  year={2022},
  doi={10.1007/978-3-030-99336-8_13},
}

@inproceedings{uniquenessClean,
    author = {Smetsers, Sjaak and Barendsen, Erik and Eekelen, Marko and Plasmeijer, Marinus},
    year = {1994},
    pages = {358-379},
    title = {Guaranteeing Safe Destructive Updates Through a Type System with Uniqueness Information for Graphs.},
    booktitle = {Graph Transformations in Computer Science},
    doi={10.1007/3-540-57787-4_23}
}

@article{Granule19,
    author = {Orchard, Dominic and Liepelt, Vilem-Benjamin and Eades III, Harley},
    title = {Quantitative program reasoning with graded modal types},
    year = {2019},
    issue_date = {August 2019},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {3},
    number = {ICFP},
    doi = {10.1145/3341714},

    journal = {Proc. ACM Program. Lang.},
    month = {jul},
}

@inproceedings{WadlerLinearTC,
  title={Linear Types can Change the World!},
  author={Philip Wadler},
  booktitle={Programming Concepts and Methods},
  year={1990},
}

@misc{latte2023,
      title={Latte: Lightweight Aliasing Tracking for Java},
      author={Conrad Zimmerman and Catarina Gamboa and Alcides Fonseca and Jonathan Aldrich},
      year={2023},
      note={(SPLASH 2023)},
      url={https://arxiv.org/abs/2309.05637},
}

@inproceedings{FlowTypeQualifier02,
author = {Foster, Jeffrey S. and Terauchi, Tachio and Aiken, Alex},
title = {Flow-sensitive type qualifiers},
year = {2002},
isbn = {1581134630},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/512529.512531},
doi = {10.1145/512529.512531},
booktitle = {Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation},
pages = {1–12},
numpages = {12},
series = {PLDI '02}
}

@article{10.1145/543552.512531,
author = {Foster, Jeffrey S. and Terauchi, Tachio and Aiken, Alex},
title = {Flow-sensitive type qualifiers},
year = {2002},
issue_date = {May 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {5},
issn = {0362-1340},
url = {https://doi.org/10.1145/543552.512531},
doi = {10.1145/543552.512531},
abstract = {We present a system for extending standard type systems with flow-sensitive type qualifiers. Users annotate their programs with type qualifiers, and inference checks that the annotations are correct. In our system only the type qualifiers are modeled flow-sensitively---the underlying standard types are unchanged, which allows us to obtain an efficient constraint-based inference algorithm that integrates flow-insensitive alias analysis, effect inference, and ideas from linear type systems to support strong updates. We demonstrate the usefulness of flow-sensitive type qualifiers by finding a number of new locking bugs in the Linux kernel.},
journal = {SIGPLAN Not.},
month = {may},
pages = {1–12},
numpages = {12},
keywords = {alias analysis, constraints, effect inference, flow-sensitivity, linux kernel, locking, restrict, type qualifiers, types}
}



@article{DFRefinement21,
    author = {Pavlinovic, Zvonimir and Su, Yusen and Wies, Thomas},
    title = {Data flow refinement type inference},
    year = {2021},
    issue_date = {January 2021},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {5},
    number = {POPL},
    doi = {10.1145/3434300},
    journal = {Proc. ACM Program. Lang.},
    month = {jan},
    articleno = {19},
    numpages = {31},

}
